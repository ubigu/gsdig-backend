package fi.ubigu.gsdig.utility;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import org.geotools.data.simple.SimpleFeatureCollection;
import org.geotools.data.simple.SimpleFeatureIterator;
import org.locationtech.jts.geom.Envelope;
import org.locationtech.jts.geom.Geometry;
import org.locationtech.jts.io.WKBWriter;
import org.opengis.feature.simple.SimpleFeature;
import org.opengis.feature.type.AttributeDescriptor;

public class PostGISFeatureWriter {

    private static final int BATCH_SIZE = 1000;

    public static List<AttributeDescriptor> getWritableAttributes(List<AttributeDescriptor> attributes) {
        return attributes.stream()
                .filter(it -> PGUtil.getPostgresType(it.getType().getBinding()) != null)
                .collect(Collectors.toList());
    }

    public static Envelope insertData(
            Connection c,
            SimpleFeatureCollection collection,
            String dataTable,
            String geometryColumn,
            List<AttributeDescriptor> attributes) throws Exception {
        String createTableColumns = Stream.concat(
                Stream.of("id bigint GENERATED BY DEFAULT AS IDENTITY", geometryColumn + " geometry"),
                attributes.stream().map(PGUtil::toCreateTableNotation)
        ).collect(Collectors.joining(","));
                
        String createDataTable = String.format("CREATE UNLOGGED TABLE %s (%s)", dataTable, createTableColumns);
        JDBC.executeUpdate(c, createDataTable);

        Envelope envelope = new Envelope();

        String insertInto = createInsertIntoStatement(dataTable, geometryColumn, attributes);
        try (PreparedStatement ps = c.prepareStatement(insertInto)) {
            try (SimpleFeatureIterator it = collection.features()) {
                int batchCounter = 0;
                WKBWriter wkb = new WKBWriter(2, false);
                while (it.hasNext()) {
                    SimpleFeature f = it.next();
                    int i = 1;

                    Geometry g = (Geometry) f.getDefaultGeometry();
                    if (g == null) {
                        ps.setBytes(i++, null);
                    } else {
                        ps.setBytes(i++, wkb.write(g));
                        envelope.expandToInclude(g.getEnvelopeInternal());
                    }

                    for (AttributeDescriptor attribute : attributes) {
                        ps.setObject(i++, f.getAttribute(attribute.getName()));
                    }

                    ps.addBatch();
                    if (++batchCounter == BATCH_SIZE) {
                        ps.executeBatch();
                        batchCounter = 0;
                    }
                }
                ps.executeBatch();
            }
        }

        return envelope;
    }
    
    public static int insertFeature(
            Connection c,
            SimpleFeature f,
            String dataTable,
            String geometryColumn,
            List<AttributeDescriptor> attributes) throws Exception {
        String insertInto = createInsertIntoStatement(dataTable, geometryColumn, attributes);

        try (PreparedStatement ps = c.prepareStatement(insertInto)) {
            WKBWriter wkb = new WKBWriter(2, false);
            int i = 1;
            Geometry g = (Geometry) f.getDefaultGeometry();
            ps.setBytes(i++, g == null ? null : wkb.write(g));

            for (AttributeDescriptor attribute : attributes) {
                ps.setObject(i++, f.getAttribute(attribute.getName()));
            }

            return ps.executeUpdate();
        }
    }
    
    private static String createInsertIntoStatement(
            String dataTable,
            String geometryColumn,
            List<AttributeDescriptor> attributes
    ) {
        String attributeColumns = Stream.concat(
                Stream.of(geometryColumn),
                attributes.stream()
                    .map(it -> it.getLocalName())
                    .filter(it -> !it.equals(geometryColumn))
        ).collect(Collectors.joining(","));
                
        String values = Stream.concat(
                Stream.of("ST_GeomFromWKB(?)"),
                Collections.nCopies(attributes.size(), "?").stream()
        ).collect(Collectors.joining(","));

        String insertInto = String.format("INSERT INTO %s (%s) VALUES (%s)",
                dataTable, attributeColumns, values);

        return insertInto;
    }
    
}
